<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TestUralLoginCommand extends Command
{
    protected $signature = 'test:ural-login';
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞ ural-obmen.ru';

    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞ ural-obmen.ru...');

        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $loginUrl = config('exchanger.ural.login_url');
        $this->info("URL –ª–æ–≥–∏–Ω–∞: {$loginUrl}");

        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        $this->info('1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...');
        $response = Http::timeout(15)->get($loginUrl);

        if (!$response->successful()) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: HTTP {$response->status()}");
            $this->warn("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...");
        } else {
            $this->info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (HTTP {$response->status()})");
        }

        $html = $response->body();
        $this->info("üìÑ –†–∞–∑–º–µ—Ä HTML: " . strlen($html) . " –±–∞–π—Ç");

        // –®–∞–≥ 2: –ò—â–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
        $this->info('2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞...');

        if (strpos($html, 'form') !== false) {
            $this->info('‚úÖ –§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞');
        } else {
            $this->warn('‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        $fields = ['logmail', 'pass', 'user_pin', 'number', 'salt'];
        foreach ($fields as $field) {
            if (strpos($html, "name=\"{$field}\"") !== false) {
                $this->info("‚úÖ –ü–æ–ª–µ {$field} –Ω–∞–π–¥–µ–Ω–æ");
            } else {
                $this->warn("‚ö†Ô∏è –ü–æ–ª–µ {$field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
        }

        // –ò—â–µ–º CAPTCHA
        if (strpos($html, 'captcha') !== false) {
            $this->info('‚úÖ CAPTCHA –Ω–∞–π–¥–µ–Ω–∞');

            // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è CAPTCHA
            if (preg_match_all('/<img[^>]*class="[^"]*captcha[^"]*"[^>]*src="([^"]+)"/', $html, $matches)) {
                $this->info('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è CAPTCHA –Ω–∞–π–¥–µ–Ω—ã:');
                foreach ($matches[1] as $i => $url) {
                    $this->info("   {$i}: {$url}");
                }
            }

            // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            if (preg_match('/<span[^>]*class="[^"]*captcha[^"]*"[^>]*>([^<]+)</', $html, $matches)) {
                $this->info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è CAPTCHA: {$matches[1]}");
            }
        } else {
            $this->warn('‚ö†Ô∏è CAPTCHA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ò—â–µ–º salt
        if (preg_match('/name="salt" value="([^"]+)"/', $html, $matches)) {
            $this->info("‚úÖ Salt –Ω–∞–π–¥–µ–Ω: {$matches[1]}");
        } else {
            $this->warn('‚ö†Ô∏è Salt –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º action URL
        if (preg_match('/<form[^>]*action="([^"]+)"/', $html, $matches)) {
            $this->info("‚úÖ Action URL: {$matches[1]}");
        } else {
            $this->warn('‚ö†Ô∏è Action URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        $this->info('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        return 0;
    }
}

<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\AdvancedCaptchaSolver;
use Illuminate\Support\Facades\Log;

class TestAdvancedCaptchaFakeCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'captcha:test-fake {--debug} {--operation=+} {--number1=5} {--number2=3}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è CAPTCHA —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $debug = $this->option('debug');
        $operation = $this->option('operation');
        $number1 = (int)$this->option('number1');
        $number2 = (int)$this->option('number2');

        $this->info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è CAPTCHA —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
        $this->line("–û–ø–µ—Ä–∞—Ü–∏—è: {$number1} {$operation} {$number2}");

        try {
            // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è CAPTCHA
            $captchaData = $this->createFakeCaptchaData($number1, $number2, $operation);

            if (!$captchaData) {
                $this->error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ CAPTCHA");
                return 1;
            }

            $this->info("–°–æ–∑–¥–∞–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è CAPTCHA:");
            $this->line("  –û–ø–µ—Ä–∞—Ü–∏—è: {$captchaData['operation']}");
            $this->line("  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1: {$captchaData['captcha1_url']}");
            $this->line("  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2: {$captchaData['captcha2_url']}");

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å
            $solver = new AdvancedCaptchaSolver();

            $this->info("\n–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–∞—Ç–µ–ª—è CAPTCHA...");
            $startTime = microtime(true);

            $result = $solver->solveArithmeticCaptcha($captchaData);

            $endTime = microtime(true);
            $executionTime = round(($endTime - $startTime) * 1000, 2);

            if ($result !== null) {
                $this->info("‚úÖ CAPTCHA —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                $this->line("  –†–µ–∑—É–ª—å—Ç–∞—Ç: {$result}");
                $this->line("  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$executionTime} –º—Å");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
                $expectedResult = $this->calculateExpectedResult($number1, $number2, $operation);
                if ($result === $expectedResult) {
                    $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!");
                } else {
                    $this->warn("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–∂–∏–¥–∞–ª–æ—Å—å: {$expectedResult}");
                }

                if ($debug) {
                    $this->showDebugInfo($captchaData, $result);
                }
            } else {
                $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å CAPTCHA");
                $this->line("  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$executionTime} –º—Å");
            }

            return 0;

        } catch (\Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " . $e->getMessage());
            Log::error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ TestAdvancedCaptchaFakeCommand: " . $e->getMessage());
            return 1;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ CAPTCHA
     */
    private function createFakeCaptchaData(int $number1, int $number2, string $operation): ?array
    {
        try {
            $tempDir = storage_path('app/temp');
            if (!is_dir($tempDir)) {
                mkdir($tempDir, 0755, true);
            }

            $captcha1Path = $tempDir . '/fake_captcha1.png';
            $captcha2Path = $tempDir . '/fake_captcha2.png';

            // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏
            $this->createDigitImage($number1, $captcha1Path);
            $this->createDigitImage($number2, $captcha2Path);

            return [
                'captcha1_url' => $captcha1Path,
                'captcha2_url' => $captcha2Path,
                'operation' => $operation,
            ];

        } catch (\Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π
     */
    private function createDigitImage(int $digit, string $path): void
    {
        $width = 50;
        $height = 70;

        $image = imagecreate($width, $height);

        // –¶–≤–µ—Ç–∞
        $white = imagecolorallocate($image, 255, 255, 255);
        $black = imagecolorallocate($image, 0, 0, 0);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–µ–ª—ã–º
        imagefill($image, 0, 0, $white);

        // –†–∏—Å—É–µ–º —Ü–∏—Ñ—Ä—É
        $this->drawDigit($image, $digit, $width, $height, $black);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        imagepng($image, $path);
        imagedestroy($image);
    }

    /**
     * –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—É
     */
    private function drawDigit($image, int $digit, int $width, int $height, int $color): void
    {
        $segments = $this->getDigitSegments($digit);

        foreach ($segments as $segment) {
            $this->drawSegment($image, $segment, $width, $height, $color);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ü–∏—Ñ—Ä—ã (7-—Å–µ–≥–º–µ–Ω—Ç–Ω—ã–π –¥–∏—Å–ø–ª–µ–π)
     */
    private function getDigitSegments(int $digit): array
    {
        $segments = [
            0 => [0, 1, 2, 3, 4, 5],      // a, b, c, d, e, f
            1 => [1, 2],                   // b, c
            2 => [0, 1, 3, 4, 6],         // a, b, d, e, g
            3 => [0, 1, 2, 3, 6],         // a, b, c, d, g
            4 => [1, 2, 5, 6],            // b, c, f, g
            5 => [0, 2, 3, 5, 6],         // a, c, d, f, g
            6 => [0, 2, 3, 4, 5, 6],      // a, c, d, e, f, g
            7 => [0, 1, 2],               // a, b, c
            8 => [0, 1, 2, 3, 4, 5, 6],   // –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            9 => [0, 1, 2, 3, 5, 6],      // a, b, c, d, f, g
        ];

        return $segments[$digit] ?? [];
    }

    /**
     * –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç
     */
    private function drawSegment($image, int $segment, int $width, int $height, int $color): void
    {
        $margin = 5;
        $segmentWidth = 3;

        $w = $width - 2 * $margin;
        $h = $height - 2 * $margin;

        switch ($segment) {
            case 0: // –í–µ—Ä—Ö–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
                $this->drawHorizontalLine($image, $margin, $margin, $w, $segmentWidth, $color);
                break;
            case 1: // –í–µ—Ä—Ö–Ω—è—è –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
                $this->drawVerticalLine($image, $width - $margin - $segmentWidth, $margin, $h/2, $segmentWidth, $color);
                break;
            case 2: // –ù–∏–∂–Ω—è—è –ø—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
                $this->drawVerticalLine($image, $width - $margin - $segmentWidth, $height/2, $h/2, $segmentWidth, $color);
                break;
            case 3: // –ù–∏–∂–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
                $this->drawHorizontalLine($image, $margin, $height - $margin - $segmentWidth, $w, $segmentWidth, $color);
                break;
            case 4: // –ù–∏–∂–Ω—è—è –ª–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
                $this->drawVerticalLine($image, $margin, $height/2, $h/2, $segmentWidth, $color);
                break;
            case 5: // –í–µ—Ä—Ö–Ω—è—è –ª–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
                $this->drawVerticalLine($image, $margin, $margin, $h/2, $segmentWidth, $color);
                break;
            case 6: // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
                $this->drawHorizontalLine($image, $margin, $height/2 - $segmentWidth/2, $w, $segmentWidth, $color);
                break;
        }
    }

    /**
     * –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
     */
    private function drawHorizontalLine($image, int $x, int $y, int $length, int $thickness, int $color): void
    {
        for ($i = 0; $i < $thickness; $i++) {
            imageline($image, $x, $y + $i, $x + $length, $y + $i, $color);
        }
    }

    /**
     * –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é
     */
    private function drawVerticalLine($image, int $x, int $y, int $length, int $thickness, int $color): void
    {
        for ($i = 0; $i < $thickness; $i++) {
            imageline($image, $x + $i, $y, $x + $i, $y + $length, $color);
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    private function calculateExpectedResult(int $a, int $b, string $operation): int
    {
        switch ($operation) {
            case '+':
                return $a + $b;
            case '-':
                return $a - $b;
            case '*':
                return $a * $b;
            case '/':
                return $b != 0 ? (int)($a / $b) : 0;
            default:
                return 0;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     */
    private function showDebugInfo(array $captchaData, int $result): void
    {
        $this->info("\nüìä –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");

        $this->line("  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:");
        $this->line("    {$captchaData['captcha1_url']}");
        $this->line("    {$captchaData['captcha2_url']}");

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        $this->analyzeImage($captchaData['captcha1_url'], "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1");
        $this->analyzeImage($captchaData['captcha2_url'], "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2");
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function analyzeImage(string $imagePath, string $label): void
    {
        try {
            $image = imagecreatefrompng($imagePath);
            if (!$image) {
                $this->line("  {$label}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
                return;
            }

            $width = imagesx($image);
            $height = imagesy($image);

            $this->line("  {$label}:");
            $this->line("    –†–∞–∑–º–µ—Ä: {$width}x{$height}");

            // –ü–æ–¥—Å—á–µ—Ç –ø–∏–∫—Å–µ–ª–µ–π
            $blackPixels = 0;
            $totalPixels = $width * $height;

            for ($x = 0; $x < $width; $x++) {
                for ($y = 0; $y < $height; $y++) {
                    $rgb = imagecolorat($image, $x, $y);
                    $r = ($rgb >> 16) & 0xFF;
                    $g = ($rgb >> 8) & 0xFF;
                    $b = $rgb & 0xFF;

                    if ($r < 100 && $g < 100 && $b < 100) {
                        $blackPixels++;
                    }
                }
            }

            $density = $blackPixels / $totalPixels;
            $this->line("    –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: " . round($density * 100, 2) . "%");

            imagedestroy($image);

        } catch (\Exception $e) {
            $this->line("  {$label}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - " . $e->getMessage());
        }
    }
}






<?php

namespace App\Console\Commands;

use App\Services\TelegramService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class SendBalancesWithIconsCommand extends Command
{
    protected $signature = 'telegram:send-balances-with-icons {--provider=} {--exchanger=}';
    protected $description = '–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ Telegram —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∫–æ–Ω–∫–∞—Ö';

    private array $providers = [
        'heleket' => 'Heleket',
        'rapira' => 'Rapira'
    ];

    private array $exchangers = [
        'obama' => 'Obama',
        'ural' => 'Ural'
    ];

    public function handle()
    {
        $this->info('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤...');

        $balancesData = [];
        $provider = $this->option('provider');
        $exchanger = $this->option('exchanger');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –æ–±–º–µ–Ω–Ω–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        $providersToProcess = $provider ? [$provider] : array_keys($this->providers);
        $exchangersToProcess = $exchanger ? [$exchanger] : array_keys($this->exchangers);

        foreach ($providersToProcess as $prov) {
            if (!isset($this->providers[$prov])) {
                $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {$prov}");
                continue;
            }

            $balancesData[$this->providers[$prov]] = [];

            foreach ($exchangersToProcess as $exch) {
                if (!isset($this->exchangers[$exch])) {
                    $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫: {$exch}");
                    continue;
                }

                $this->info("–ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {$this->providers[$prov]} / {$this->exchangers[$exch]}...");

                try {
                    $balances = $this->getBalances($prov, $exch);

                    if ($balances !== null) {
                        $balancesData[$this->providers[$prov]][$this->exchangers[$exch]] = $balances;
                        $this->info("‚úì –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã");
                    } else {
                        $this->warn("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã");
                    }
                } catch (\Exception $e) {
                    $this->error("‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: " . $e->getMessage());
                }
            }
        }

        if (empty($balancesData)) {
            $this->error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤');
            return 1;
        }

        $this->info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram...');

        $telegramService = app(TelegramService::class);
        $message = $this->formatBalancesMessageWithIcons($balancesData);

        if ($telegramService->sendMessage($message)) {
            $this->info('‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
            return 1;
        }

        return 0;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞
     */
    private function getBalances(string $provider, string $exchanger): ?array
    {
        $cfg = config("services.{$provider}.{$exchanger}");
        if (!$cfg) {
            Log::error("SendBalancesWithIconsCommand: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", [
                'provider' => $provider,
                'exchanger' => $exchanger
            ]);
            return null;
        }

        $url = $cfg['balance_url'];

        try {
            if ($provider === 'heleket') {
                return $this->getHeleketBalances($cfg, $url);
            } else {
                return $this->getRapiraBalances($cfg, $url);
            }
        } catch (\Exception $e) {
            Log::error("SendBalancesWithIconsCommand: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤", [
                'provider' => $provider,
                'exchanger' => $exchanger,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã Heleket
     */
    private function getHeleketBalances(array $cfg, string $url): array
    {
        $privateKey = $this->preparePrivateKey($cfg['private_key']);
        $payload = [
            'iss' => $cfg['client_id'],
            'aud' => $cfg['audience'],
            'iat' => time(),
            'exp' => time() + 3600
        ];

        $jwt = $this->makeJwt($payload, $privateKey);

        $response = \Illuminate\Support\Facades\Http::withHeaders([
            'Authorization' => 'Bearer ' . $jwt,
            'Content-Type' => 'application/json'
        ])->get($url);

        if (!$response->successful()) {
            throw new \Exception("HTTP error: " . $response->status());
        }

        $data = $response->json();
        return $this->normalizeHeleket($data);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã Rapira
     */
    private function getRapiraBalances(array $cfg, string $url): array
    {
        $response = \Illuminate\Support\Facades\Http::withHeaders([
            'Authorization' => 'Bearer ' . $cfg['api_key'],
            'Content-Type' => 'application/json'
        ])->get($url);

        if (!$response->successful()) {
            throw new \Exception("HTTP error: " . $response->status());
        }

        $data = $response->json();
        return $this->normalizeRapira($data);
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
     */
    private function preparePrivateKey(string $privateKey): string
    {
        $privateKey = str_replace(['-----BEGIN PRIVATE KEY-----', '-----END PRIVATE KEY-----', "\n", "\r"], '', $privateKey);
        $privateKey = "-----BEGIN PRIVATE KEY-----\n" . chunk_split($privateKey, 64, "\n") . "-----END PRIVATE KEY-----";
        return $privateKey;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
     */
    private function makeJwt(array $payload, string $privateKey): string
    {
        $header = ['alg' => 'RS256', 'typ' => 'JWT'];
        $headerEncoded = $this->urlsafeB64(json_encode($header));
        $payloadEncoded = $this->urlsafeB64(json_encode($payload));

        $signature = '';
        openssl_sign($headerEncoded . '.' . $payloadEncoded, $signature, $privateKey, OPENSSL_ALGO_SHA256);
        $signatureEncoded = $this->urlsafeB64($signature);

        return $headerEncoded . '.' . $payloadEncoded . '.' . $signatureEncoded;
    }

    /**
     * URL-safe base64 encoding
     */
    private function urlsafeB64(string $input): string
    {
        return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($input));
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Heleket
     */
    private function normalizeHeleket(array $raw): array
    {
        $result = [];

        if (isset($raw['merchant']) && is_array($raw['merchant'])) {
            $result['merchant'] = [];
            foreach ($raw['merchant'] as $currency => $amount) {
                if (is_numeric($amount) && $amount != 0) {
                    $result['merchant'][] = [
                        'code' => strtoupper($currency),
                        'amount' => (float)$amount
                    ];
                }
            }
        }

        if (isset($raw['user']) && is_array($raw['user'])) {
            $result['user'] = [];
            foreach ($raw['user'] as $currency => $amount) {
                if (is_numeric($amount) && $amount != 0) {
                    $result['user'][] = [
                        'code' => strtoupper($currency),
                        'amount' => (float)$amount
                    ];
                }
            }
        }

        return $result;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Rapira
     */
    private function normalizeRapira(array $raw): array
    {
        $result = [];

        if (isset($raw['data']) && is_array($raw['data'])) {
            foreach ($raw['data'] as $currency => $amount) {
                if (is_numeric($amount) && $amount != 0) {
                    $result[] = [
                        'code' => strtoupper($currency),
                        'amount' => (float)$amount
                    ];
                }
            }
        }

        return $result;
    }

    private function formatBalancesMessageWithIcons(array $balancesData): string
    {
        $date = now()->format('d.m.Y H:i');
        $message = "üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤</b> ({$date})\n\n";

        $message .= "üé® <b>–ò–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç:</b>\n";
        $message .= "–í—Å–µ –≤–∞–ª—é—Ç—ã –∏–º–µ—é—Ç –∫—Ä–∞—Å–∏–≤—ã–µ SVG –∏–∫–æ–Ω–∫–∏ –≤ –ø–∞–ø–∫–µ /public/images/coins/\n\n";

        $hasData = false;
        $providerTotals = [];
        $grandTotal = 0.0;
        $usedCurrencies = [];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
        $providerOrder = ['Heleket', 'Rapira'];
        $exchangerOrder = ['Obama', 'Ural'];

        foreach ($providerOrder as $provider) {
            if (!isset($balancesData[$provider]) || empty($balancesData[$provider])) {
                continue;
            }

            $providerIcon = $this->getProviderIcon($provider);
            $message .= "{$providerIcon} <b>{$provider}</b>\n";
            $providerTotal = 0.0;

            foreach ($exchangerOrder as $exchanger) {
                if (!isset($balancesData[$provider][$exchanger]) || empty($balancesData[$provider][$exchanger])) {
                    continue;
                }

                $exchangerIcon = $this->getExchangerIcon($exchanger);
                $message .= "  ‚îî {$exchangerIcon} <b>{$exchanger}</b>\n";
                $hasData = true;
                $exchangerTotal = 0.0;

                if (isset($balancesData[$provider][$exchanger]['merchant']) && is_array($balancesData[$provider][$exchanger]['merchant']) && !empty($balancesData[$provider][$exchanger]['merchant'])) {
                    $merchantTotal = app(\App\Services\BybitService::class)->calculateTotalUsd($balancesData[$provider][$exchanger]['merchant']);
                    $exchangerTotal += $merchantTotal;
                    $message .= "    üíº <b>–ú–µ—Ä—á–∞–Ω—Ç</b> ({$this->formatUsd($merchantTotal)}):\n";
                    foreach ($balancesData[$provider][$exchanger]['merchant'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 8);
                            $usdAmount = app(\App\Services\BybitService::class)->getBalanceUsd($balance);
                            $currencyIcon = $this->getCurrencyIcon($balance['code']);
                            $iconStatus = $this->getIconStatus($balance['code']);
                            $message .= "      {$currencyIcon} {$balance['code']}: {$amount} ({$this->formatUsd($usdAmount)}) {$iconStatus}\n";
                            $usedCurrencies[$balance['code']] = true;
                        }
                    }
                }

                if (isset($balancesData[$provider][$exchanger]['user']) && is_array($balancesData[$provider][$exchanger]['user']) && !empty($balancesData[$provider][$exchanger]['user'])) {
                    $userTotal = app(\App\Services\BybitService::class)->calculateTotalUsd($balancesData[$provider][$exchanger]['user']);
                    $exchangerTotal += $userTotal;
                    $message .= "    üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> ({$this->formatUsd($userTotal)}):\n";
                    foreach ($balancesData[$provider][$exchanger]['user'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 8);
                            $usdAmount = app(\App\Services\BybitService::class)->getBalanceUsd($balance);
                            $currencyIcon = $this->getCurrencyIcon($balance['code']);
                            $iconStatus = $this->getIconStatus($balance['code']);
                            $message .= "      {$currencyIcon} {$balance['code']}: {$amount} ({$this->formatUsd($usdAmount)}) {$iconStatus}\n";
                            $usedCurrencies[$balance['code']] = true;
                        }
                    }
                }

                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ (–Ω–µ Heleket)
                if (!isset($balancesData[$provider][$exchanger]['merchant']) && !isset($balancesData[$provider][$exchanger]['user']) && is_array($balancesData[$provider][$exchanger]) && !empty($balancesData[$provider][$exchanger])) {
                    $exchangerTotal = app(\App\Services\BybitService::class)->calculateTotalUsd($balancesData[$provider][$exchanger]);
                    $message .= "    üí∞ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</b> ({$this->formatUsd($exchangerTotal)}):\n";
                    foreach ($balancesData[$provider][$exchanger] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 8);
                            $usdAmount = app(\App\Services\BybitService::class)->getBalanceUsd($balance);
                            $currencyIcon = $this->getCurrencyIcon($balance['code']);
                            $iconStatus = $this->getIconStatus($balance['code']);
                            $message .= "      {$currencyIcon} {$balance['code']}: {$amount} ({$this->formatUsd($usdAmount)}) {$iconStatus}\n";
                            $usedCurrencies[$balance['code']] = true;
                        }
                    }
                }

                // –ò—Ç–æ–≥–æ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫—É
                if ($exchangerTotal > 0) {
                    $message .= "    üìà <b>–ò—Ç–æ–≥–æ –ø–æ {$exchanger}</b>: {$this->formatUsd($exchangerTotal)}\n";
                    $providerTotal += $exchangerTotal;
                }

                $message .= "\n";
            }

            // –ò—Ç–æ–≥–æ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            if ($providerTotal > 0) {
                $providerTotals[$provider] = $providerTotal;
                $grandTotal += $providerTotal;
                $message .= "üèÜ <b>–ò—Ç–æ–≥–æ –ø–æ {$provider}</b>: {$this->formatUsd($providerTotal)}\n\n";
            }
        }

        if (!$hasData) {
            $message .= "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤\n";
        } else {
            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
            $message .= "üìã <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:</b>\n";
            foreach ($providerOrder as $provider) {
                if (isset($providerTotals[$provider])) {
                    $total = $providerTotals[$provider];
                    $percentage = $grandTotal > 0 ? round(($total / $grandTotal) * 100, 1) : 0;
                    $providerIcon = $this->getProviderIcon($provider);
                    $message .= "  {$providerIcon} {$provider}: {$this->formatUsd($total)} ({$percentage}%)\n";
                }
            }

            // –û–±—â–∏–π –∏—Ç–æ–≥
            $message .= "\nüíµ <b>–û–ë–©–ò–ô –ë–ê–õ–ê–ù–°: {$this->formatUsd($grandTotal)}</b>\n";

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∫–æ–Ω–∫–∞—Ö
            $message .= "\nüé® <b>–ò–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç:</b>\n";
            $message .= "  ‚Ä¢ –í—Å–µ–≥–æ –≤–∞–ª—é—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: " . count($usedCurrencies) . "\n";
            $message .= "  ‚Ä¢ –ò–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤: /public/images/coins/\n";
            $message .= "  ‚Ä¢ –§–æ—Ä–º–∞—Ç: SVG —Ñ–∞–π–ª—ã\n";
        }

        return $message;
    }

    private function getProviderIcon(string $provider): string
    {
        return match (strtolower($provider)) {
            'heleket' => 'üü¢',
            'rapira' => 'üîµ',
            default => 'üìä'
        };
    }

    private function getExchangerIcon(string $exchanger): string
    {
        return match (strtolower($exchanger)) {
            'obama' => 'üë®‚Äçüíº',
            'ural' => 'üèîÔ∏è',
            default => 'üè¢'
        };
    }

    private function getCurrencyIcon(string $currency): string
    {
        return match (strtoupper($currency)) {
            'BTC' => '‚Çø',
            'ETH' => 'Œû',
            'USDT', 'USDC', 'DAI' => 'üíµ',
            'BNB' => 'üü°',
            'DOGE', 'SHIB', 'DOGS' => 'üêï',
            'SOL' => '‚òÄÔ∏è',
            'TRX' => '‚ö°',
            'LTC' => '≈Å',
            'TON', 'DASH' => 'üíé',
            'BCH' => '‚Çø',
            'XMR' => 'üîí',
            'AVAX' => '‚ùÑÔ∏è',
            'POL' => 'üî∑',
            'RUB' => '‚ÇΩ',
            'OP' => 'üîµ',
            'NOT' => 'üìù',
            'ETC' => 'üî∂',
            default => 'ü™ô'
        };
    }

    private function getIconStatus(string $currency): string
    {
        $upperCurrency = strtoupper($currency);
        $iconPath = "images/coins/{$upperCurrency}.svg";
        $fullPath = public_path($iconPath);

        return file_exists($fullPath) ? '‚úÖ' : '‚ùå';
    }

    private function formatUsd(float $amount): string
    {
        if ($amount == 0) {
            return '$0.00';
        }

        if ($amount < 0.01 && $amount > 0) {
            return '$' . number_format($amount, 4);
        }

        return '$' . number_format($amount, 2);
    }
}

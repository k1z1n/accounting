<?php

namespace App\Console\Commands;

use App\Services\CookieManagerService;
use Illuminate\Console\Command;

class ManageCookiesCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cookies:manage {action=status : –î–µ–π—Å—Ç–≤–∏–µ (status|refresh|test)} {exchanger? : –ò–º—è –æ–±–º–µ–Ω–Ω–∏–∫–∞ (obama|ural)}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–∫–∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle(CookieManagerService $cookieManager)
    {
        $action = $this->argument('action');
        $exchanger = $this->argument('exchanger');

        switch ($action) {
            case 'status':
                $this->showStatus($cookieManager, $exchanger);
                break;
            case 'refresh':
                $this->refreshCookies($cookieManager, $exchanger);
                break;
            case 'test':
                $this->testCookies($cookieManager, $exchanger);
                break;
            default:
                $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                return 1;
        }

        return 0;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫—É–∫–∏
     */
    private function showStatus(CookieManagerService $cookieManager, ?string $exchanger): void
    {
        $this->info('–°—Ç–∞—Ç—É—Å –∫—É–∫–∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤:');
        $this->newLine();

        $status = $cookieManager->getCookiesStatus();

        foreach ($status as $name => $info) {
            if ($exchanger && $name !== $exchanger) {
                continue;
            }

            $this->line("üìä {$name}:");
            $this->line("   –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " . ($info['has_credentials'] ? '‚úÖ' : '‚ùå'));
            $this->line("   PIN –∫–æ–¥: " . ($info['has_pin'] ? '‚úÖ' : '‚ùå'));
            $this->line("   –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã: " . ($info['current_cookies_valid'] ? '‚úÖ' : '‚ùå'));
            $this->line("   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " . ($info['can_auto_refresh'] ? '‚úÖ' : '‚ùå'));
            $this->newLine();
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏
     */
    private function refreshCookies(CookieManagerService $cookieManager, ?string $exchanger): void
    {
        if ($exchanger) {
            $this->info("–û–±–Ω–æ–≤–ª—è—é –∫—É–∫–∏ –¥–ª—è {$exchanger}...");
            $cookies = $cookieManager->getFreshCookies($exchanger);

            if ($cookies) {
                $this->info("‚úÖ –ù–æ–≤—ã–µ –∫—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {$exchanger}");
                $this->line("–ö—É–∫–∏: " . substr($cookies, 0, 100) . "...");
            } else {
                $this->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –¥–ª—è {$exchanger}");
            }
        } else {
            $this->info("–û–±–Ω–æ–≤–ª—è—é –∫—É–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤...");
            $results = $cookieManager->refreshAllCookies();

            foreach ($results as $name => $result) {
                if ($result['success']) {
                    $this->info("‚úÖ {$name}: –∫—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                } else {
                    $this->error("‚ùå {$name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏");
                }
            }
        }
    }

    /**
     * –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏
     */
    private function testCookies(CookieManagerService $cookieManager, ?string $exchanger): void
    {
        $this->info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É–∫–∏...');

        $status = $cookieManager->getCookiesStatus();

        foreach ($status as $name => $info) {
            if ($exchanger && $name !== $exchanger) {
                continue;
            }

            $this->line("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {$name}...");

            if (!$info['has_credentials']) {
                $this->error("   ‚ùå –ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
                continue;
            }

            if ($info['current_cookies_valid']) {
                $this->info("   ‚úÖ –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç");
            } else {
                $this->warn("   ‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...");

                $newCookies = $cookieManager->getFreshCookies($name);
                if ($newCookies) {
                    $this->info("   ‚úÖ –ù–æ–≤—ã–µ –∫—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã");
                } else {
                    $this->error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫—É–∫–∏");
                }
            }
        }
    }
}













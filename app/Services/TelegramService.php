<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramService
{
    private string $botToken;
    private string $chatId;
    private BybitService $bybitService;

    public function __construct(BybitService $bybitService)
    {
        $this->botToken = config('services.telegram.bot_token');
        $this->chatId = config('services.telegram.chat_id');
        $this->bybitService = $bybitService;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    public function sendMessage(string $message, bool $parseMode = true): bool
    {
        if (empty($this->botToken) || empty($this->chatId)) {
            Log::error('TelegramService: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã bot_token –∏–ª–∏ chat_id');
            return false;
        }

        try {
            $url = "https://api.telegram.org/bot{$this->botToken}/sendMessage";

            $data = [
                'chat_id' => $this->chatId,
                'text' => $message,
            ];

            if ($parseMode) {
                $data['parse_mode'] = 'HTML';
            }

            Log::info('TelegramService: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', [
                'url' => $url,
                'chat_id' => $this->chatId,
                'message_length' => strlen($message),
                'parse_mode' => $parseMode ? 'HTML' : 'none',
                'message_preview' => substr($message, 0, 200) . (strlen($message) > 200 ? '...' : '')
            ]);

            $response = Http::timeout(10)->post($url, $data);

            Log::info('TelegramService: –æ—Ç–≤–µ—Ç –æ—Ç Telegram API', [
                'status' => $response->status(),
                'body' => $response->body(),
                'successful' => $response->successful()
            ]);

            if (!$response->successful()) {
                Log::error('TelegramService: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);
                return false;
            }

            $responseData = $response->json();
            Log::info('TelegramService: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', [
                'message_id' => $responseData['result']['message_id'] ?? 'unknown',
                'chat_id' => $responseData['result']['chat']['id'] ?? 'unknown'
            ]);
            return true;

        } catch (\Exception $e) {
            Log::error('TelegramService: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–∞—Ö –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
     */
    public function sendExchangerBalances(array $balancesData): bool
    {
        Log::info('TelegramService: –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤', ['data' => $balancesData]);

        if (empty($balancesData)) {
            Log::warning('TelegramService: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤');
            return $this->sendMessage("‚ö†Ô∏è <b>–ë–∞–ª–∞–Ω—Å—ã –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤</b> (" . now()->format('d.m.Y H:i') . ")\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤");
        }

        $message = $this->formatBalancesMessage($balancesData);
        Log::info('TelegramService: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', ['message_length' => strlen($message)]);

        return $this->sendMessage($message);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
     */
    private function formatBalancesMessage(array $balancesData): string
    {
        Log::info('TelegramService: –Ω–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', [
            'providers_count' => count($balancesData),
            'providers' => array_keys($balancesData)
        ]);

        $date = now()->format('d.m.Y');
        $message = "";

        $hasData = false;
        $providerTotals = [];
        $grandTotal = 0.0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
        $providerOrder = ['Heleket', 'Rapira', 'Bybit'];
        $exchangerOrder = ['Obama', 'Ural', 'Main'];

        foreach ($providerOrder as $provider) {
            if (!isset($balancesData[$provider]) || empty($balancesData[$provider])) {
                Log::info("TelegramService: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {$provider} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
                continue;
            }

            Log::info("TelegramService: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {$provider}", [
                'exchangers' => array_keys($balancesData[$provider])
            ]);

            foreach ($exchangerOrder as $exchanger) {
                if (!isset($balancesData[$provider][$exchanger]) || empty($balancesData[$provider][$exchanger])) {
                    continue;
                }

                $message .= "[{$provider} {$exchanger}] –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ {$date}\n\n";
                $hasData = true;
                $exchangerTotal = 0.0;

                if (isset($balancesData[$provider][$exchanger]['merchant']) && is_array($balancesData[$provider][$exchanger]['merchant']) && !empty($balancesData[$provider][$exchanger]['merchant'])) {
                    $merchantTotal = $this->bybitService->calculateTotalUsd($balancesData[$provider][$exchanger]['merchant']);
                    $exchangerTotal += $merchantTotal;
                    $message .= "–ú–µ—Ä—á–∞–Ω—Ç ({$this->formatUsd($merchantTotal)})\n";
                    foreach ($balancesData[$provider][$exchanger]['merchant'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 10);
                            $usdAmount = $this->bybitService->getBalanceUsd($balance);
                            $message .= "[{$balance['code']}] {$amount} ({$this->formatUsd($usdAmount)})\n";
                        }
                    }
                    $message .= "\n";
                }

                if (isset($balancesData[$provider][$exchanger]['user']) && is_array($balancesData[$provider][$exchanger]['user']) && !empty($balancesData[$provider][$exchanger]['user'])) {
                    $userTotal = $this->bybitService->calculateTotalUsd($balancesData[$provider][$exchanger]['user']);
                    $exchangerTotal += $userTotal;
                    $message .= "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({$this->formatUsd($userTotal)})\n";
                    foreach ($balancesData[$provider][$exchanger]['user'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 10);
                            $usdAmount = $this->bybitService->getBalanceUsd($balance);
                            $message .= "[{$balance['code']}] {$amount} ({$this->formatUsd($usdAmount)})\n";
                        }
                    }
                    $message .= "\n";
                }

                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ (–Ω–µ Heleket)
                if (!isset($balancesData[$provider][$exchanger]['merchant']) && !isset($balancesData[$provider][$exchanger]['user']) && is_array($balancesData[$provider][$exchanger]) && !empty($balancesData[$provider][$exchanger])) {
                    $exchangerTotal = $this->bybitService->calculateTotalUsd($balancesData[$provider][$exchanger]);

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è Heleket –∏ Rapira, –Ω–æ –Ω–µ –¥–ª—è Bybit
                    if ($provider !== 'Bybit') {
                        $message .= "–û–±—â–∏–π –±–∞–ª–∞–Ω—Å ({$this->formatUsd($exchangerTotal)})\n";
                    }

                    foreach ($balancesData[$provider][$exchanger] as $balance) {
                        if ($balance['amount'] > 0) {
                            $amount = number_format($balance['amount'], 10);
                            $usdAmount = $this->bybitService->getBalanceUsd($balance);
                            $message .= "[{$balance['code']}] {$amount} ({$this->formatUsd($usdAmount)})\n";
                        }
                    }
                    $message .= "\n";
                }

                // –ò—Ç–æ–≥–æ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫—É
                if ($exchangerTotal > 0) {
                    $message .= "<b><u>–í—Å–µ–≥–æ: {$this->formatUsd($exchangerTotal)}</u></b>\n\n";
                    $providerTotals[$provider] = ($providerTotals[$provider] ?? 0) + $exchangerTotal;
                    $grandTotal += $exchangerTotal;
                }
            }
        }

        if (!$hasData) {
            $message .= "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤\n";
        } else {
            // –û–±—â–∏–π –∏—Ç–æ–≥
            $message .= "üíµ <b><u>–û–ë–©–ò–ô –ë–ê–õ–ê–ù–°: {$this->formatUsd($grandTotal)}</u></b>\n";

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            // $distribution = $this->calculateDistribution($balancesData, $grandTotal);

                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            // $message .= "\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n";
            // $message .= "  ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: " . count($providerTotals) . "\n";
            // $message .= "  ‚Ä¢ –û–±–º–µ–Ω–Ω–∏–∫–æ–≤: " . array_sum(array_map('count', $balancesData)) . "\n";
            // $message .= "  ‚Ä¢ –í–∞–ª—é—Ç: " . $this->countUniqueCurrencies($balancesData) . "\n";

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
            // if (!empty($distribution['providers'])) {
            //     $message .= "\nüè¢ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:</b>\n";
            //     foreach ($distribution['providers'] as $provider => $data) {
            //         $message .= "  ‚Ä¢ {$provider}: {$this->formatUsd($data['total'])} ({$data['percentage']}%)\n";
            //     }
            // }

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º
            // if (!empty($distribution['exchangers'])) {
            //     $message .= "\nüè¶ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞–º:</b>\n";
            //     foreach ($distribution['exchangers'] as $exchanger => $data) {
            //         $message .= "  ‚Ä¢ {$exchanger}: {$this->formatUsd($data['total'])} ({$data['percentage']}%)\n";
            //     }
            // }
        }

        return $message;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     */
    private function getProviderIcon(string $provider): string
    {
        return match (strtolower($provider)) {
            'heleket' => 'üü¢',
            'rapira' => 'üîµ',
            'bybit' => 'üü°',
            default => 'ÔøΩÔøΩ'
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –æ–±–º–µ–Ω–Ω–∏–∫–∞
     */
    private function getExchangerIcon(string $exchanger): string
    {
        return match (strtolower($exchanger)) {
            'obama' => 'üë®‚Äçüíº',
            'ural' => 'üèîÔ∏è',
            default => 'üè¢'
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –≤–∞–ª—é—Ç—ã
     */
    private function getCurrencyIcon(string $currency): string
    {
        $upperCurrency = strtoupper($currency);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∫–æ–Ω–∫–∞ –≤ –ø–∞–ø–∫–µ coins
        $iconPath = "images/coins/{$upperCurrency}.svg";
        $fullPath = public_path($iconPath);

        if (file_exists($fullPath)) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏-–∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–ª—å–∑—è –≤—Å—Ç–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return $this->getCurrencyEmoji($currency);
        }

        // Fallback –Ω–∞ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return $this->getCurrencyEmoji($currency);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∫–æ–Ω–∫–∏ –≤–∞–ª—é—Ç—ã
     */
    private function getIconStatus(string $currency): string
    {
        $upperCurrency = strtoupper($currency);
        $iconPath = "images/coins/{$upperCurrency}.svg";
        $fullPath = public_path($iconPath);

        if (file_exists($fullPath)) {
            return '‚úÖ'; // –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
        }
        return '‚ùå'; // –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–ª—é—Ç—ã
     */
    private function getCurrencyEmoji(string $currency): string
    {
        return match (strtoupper($currency)) {
            'BTC' => '‚Çø',
            'ETH' => 'Œû',
            'USDT', 'USDC', 'DAI' => 'üíµ',
            'BNB' => 'üü°',
            'DOGE', 'SHIB', 'DOGS' => 'üêï',
            'SOL' => '‚òÄÔ∏è',
            'TRX' => '‚ö°',
            'LTC' => '≈Å',
            'TON', 'DASH' => 'üíé',
            'BCH' => '‚Çø',
            'XMR' => 'üîí',
            'AVAX' => '‚ùÑÔ∏è',
            'POL' => 'üî∑',
            'RUB' => '‚ÇΩ',
            'OP' => 'üîµ',
            'NOT' => 'üìù',
            'ETC' => 'üî∂',
            default => 'ü™ô'
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤–∞–ª—é—Ç—ã
     */
    private function getCurrencyIconPath(string $currency): ?string
    {
        $upperCurrency = strtoupper($currency);
        $iconPath = "images/coins/{$upperCurrency}.svg";
        $fullPath = public_path($iconPath);

        return file_exists($fullPath) ? $iconPath : null;
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
     */
    private function countUniqueCurrencies(array $balancesData): int
    {
        $currencies = [];

        foreach ($balancesData as $provider => $exchangers) {
            foreach ($exchangers as $exchanger => $data) {
                if (isset($data['merchant']) && is_array($data['merchant'])) {
                    foreach ($data['merchant'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $currencies[$balance['code']] = true;
                        }
                    }
                }
                if (isset($data['user']) && is_array($data['user'])) {
                    foreach ($data['user'] as $balance) {
                        if ($balance['amount'] > 0) {
                            $currencies[$balance['code']] = true;
                        }
                    }
                }
                if (!isset($data['merchant']) && !isset($data['user']) && is_array($data)) {
                    foreach ($data as $balance) {
                        if ($balance['amount'] > 0) {
                            $currencies[$balance['code']] = true;
                        }
                    }
                }
            }
        }

        return count($currencies);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
     */
    private function calculateDistribution(array $balancesData, float $grandTotal): array
    {
        $distribution = [
            'providers' => [],
            'exchangers' => []
        ];

        $providerTotals = [];
        $exchangerTotals = [];

        foreach ($balancesData as $provider => $exchangers) {
            $providerTotal = 0;

            foreach ($exchangers as $exchanger => $data) {
                $exchangerTotal = 0;

                if (isset($data['merchant']) && is_array($data['merchant'])) {
                    $exchangerTotal += $this->bybitService->calculateTotalUsd($data['merchant']);
                }
                if (isset($data['user']) && is_array($data['user'])) {
                    $exchangerTotal += $this->bybitService->calculateTotalUsd($data['user']);
                }
                if (!isset($data['merchant']) && !isset($data['user']) && is_array($data)) {
                    $exchangerTotal += $this->bybitService->calculateTotalUsd($data);
                }

                if ($exchangerTotal > 0) {
                    $exchangerTotals["{$provider} {$exchanger}"] = $exchangerTotal;
                    $providerTotal += $exchangerTotal;
                }
            }

            if ($providerTotal > 0) {
                $providerTotals[$provider] = $providerTotal;
            }
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        foreach ($providerTotals as $provider => $total) {
            $percentage = $grandTotal > 0 ? ($total / $grandTotal) * 100 : 0;
            $distribution['providers'][$provider] = [
                'total' => $total,
                'percentage' => round($percentage, 1)
            ];
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤
        foreach ($exchangerTotals as $exchanger => $total) {
            $percentage = $grandTotal > 0 ? ($total / $grandTotal) * 100 : 0;
            $distribution['exchangers'][$exchanger] = [
                'total' => $total,
                'percentage' => round($percentage, 1)
            ];
        }

        return $distribution;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
     */
    private function formatUsd(float $amount): string
    {
        if ($amount == 0) {
            return '$0.00';
        }

        if ($amount < 0.01 && $amount > 0) {
            return '$' . number_format($amount, 4);
        }

        return '$' . number_format($amount, 2);
    }
}
